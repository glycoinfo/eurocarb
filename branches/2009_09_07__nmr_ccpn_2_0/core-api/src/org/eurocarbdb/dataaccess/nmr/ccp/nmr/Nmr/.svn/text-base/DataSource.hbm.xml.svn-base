<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC
  "-//Hibernate/Hibernate Mapping DTD//EN"
  "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd" >

<hibernate-mapping auto-import="false" package="ccp.api.nmr.Nmr">
  <class
    name="DataSource"
    table="NMR_DATASOURCE"
    schema="nmr" 
  >
  <meta attribute="extends" inherit="false">memops.general.AbstractModelObject</meta>
  <meta attribute="implements">java.lang.Comparable</meta>
  <meta attribute="class-description">This class describes the stored data matrix from an NMR spectrum.  It is a general class that may be used to describe data in the time domain, frequency domain a combination of the two, or axes that are neither time nor frequency The actual data are kept in a location defined by the dataLocation link. The DataSource attributes contain the information required to extract the data from the source file, but the data model as such does not include the actual data matrix</meta>
  <cache usage="read-write"/>

  <id
    name="_dbId"
    access="field"
    column="DATAOBJECTID"
    type="java.lang.Long">
    <meta attribute="scope-set">protected</meta>
    <generator class="native"/>
  </id>
  
  <many-to-one
    name="_topObject"
    access="field"
    column="TOPOBJECTID"
    class="ccp.api.nmr.Nmr.NmrProject"
    not-null="true"
    unique="false"
    foreign-key="NMR_DATASOURCE_NMRPROJECT_TO_FK"
  >
    <meta attribute="field-description">hard coded link to topObject</meta>
  </many-to-one>
  
  <property
    name="_dataType"
    access="field"
    type="java.lang.String" length="80"
    not-null="true"
  >
    <meta attribute="field-description">FID, part-processed, processed, other,or whatever.</meta>
    <meta attribute="default-value">null</meta>
    <column name="DATATYPE" sql-type="VARCHAR(80)" length="80" not-null="true"/>
  </property>
  
  <property
    name="_details"
    access="field"
    type="java.lang.String"
    not-null="false"
  >
    <meta attribute="field-description">Free text, for notes, explanatory comments, etc.</meta>
    <meta attribute="default-value">null</meta>
    <column name="DETAILS" sql-type="TEXT" not-null="false"/>
  </property>
  
  <property
    name="_isNormalStorage"
    access="field"
    type="java.lang.Boolean"
    not-null="true"
  >
    <meta attribute="field-description">Can this file be read using the normal storage algorithms. Default true. E.g. Kay type P+/-N storage has False for this parameter</meta>
    <meta attribute="default-value">true</meta>
    <column name="ISNORMALSTORAGE" sql-type="BOOLEAN" not-null="true"/>
  </property>
  
  <property
    name="_isSimulated"
    access="field"
    type="java.lang.Boolean"
    not-null="true"
  >
    <meta attribute="field-description">Is the DataSource simulated rather than measured?</meta>
    <meta attribute="default-value">false</meta>
    <column name="ISSIMULATED" sql-type="BOOLEAN" not-null="true"/>
  </property>
  
  <property
    name="_name"
    access="field"
    type="java.lang.String" length="80"
    not-null="true"
  >
    <meta attribute="field-description">name of DataSource</meta>
    <meta attribute="default-value">null</meta>
    <column name="NAME" sql-type="VARCHAR(80)" length="80" not-null="true"/>
  </property>
  
  <property
    name="_noiseLevel"
    access="field"
    type="java.lang.Float"
    not-null="false"
  >
    <meta attribute="field-description">Estimated noise level for a spectrum, defined as the estimated standard deviation of the points from the baseplane/line.</meta>
    <meta attribute="default-value">null</meta>
    <column name="NOISELEVEL" sql-type="FLOAT" not-null="false"/>
  </property>
  
  <property
    name="_numDim"
    access="field"
    type="java.lang.Integer"
    not-null="true"
  >
    <meta attribute="field-description">Number of dimensions - may be different from the numDim of the Experiment to which the DataSource belongs (e.g. projections).</meta>
    <meta attribute="default-value">null</meta>
    <column name="NUMDIM" sql-type="INTEGER" not-null="true"/>
  </property>
  
  <property
    name="_numShapes"
    access="field"
    type="java.lang.Integer"
    not-null="true"
  >
    <meta attribute="field-description">Number of shapes in each matrix decomposition component. If set to zero the data are not decomposed by shape - which is the normal case. </meta>
    <meta attribute="default-value">new java.lang.Integer(0)</meta>
    <column name="NUMSHAPES" sql-type="INTEGER" not-null="true"/>
  </property>
  
  <property
    name="_numSparsePoints"
    access="field"
    type="java.lang.Integer"
    not-null="true"
  >
    <meta attribute="field-description">Number of time increments acquired. If nonzero, this signifies that the original data are sparsely sampled - otherwise it can be derived from the size of the grid. Note that this counts the number of time steps, a hypercomplex point counts as one point even if it requires eight real numbers to describe it.</meta>
    <meta attribute="default-value">new java.lang.Integer(0)</meta>
    <column name="NUMSPARSEPOINTS" sql-type="INTEGER" not-null="true"/>
  </property>
  
  <property
    name="_recordNumber"
    access="field"
    type="java.lang.Integer"
    not-null="true"
  >
    <meta attribute="field-description">Number of record (starting at zero) of data record in dataStore. May or may not be relevant, depending on the type of dataStore</meta>
    <meta attribute="default-value">new java.lang.Integer(0)</meta>
    <column name="RECORDNUMBER" sql-type="INTEGER" not-null="true"/>
  </property>
  
  <property
    name="_scale"
    access="field"
    type="java.lang.Float"
    not-null="true"
  >
    <meta attribute="field-description">Scaling factor for intensities and volumes in a given datasource, for use when comparing intensities etc. between spectra. Intensities and volumes should be *multiplied* by scale before comparison, so that a scale of e.g. 10.0 means that the intensities are ten times larger than reflected by the numbers stored in the file.</meta>
    <meta attribute="default-value">new java.lang.Float(1.0)</meta>
    <column name="SCALE" sql-type="FLOAT" not-null="true"/>
  </property>
  
  <property
    name="_serial"
    access="field"
    type="java.lang.Integer"
    not-null="true"
  >
    <meta attribute="field-description">Serial number of object. Serves as object main key. Serial numbers of deleted objects are not re-used. Serial numbers can only be set by the implementation. Values are in practice always positive, since negative values are interpreted as a signal to set the next free serial</meta>
    <meta attribute="default-value">null</meta>
    <column name="SERIAL" sql-type="INTEGER" not-null="true" unique-key="dataSourceUniqueKey" />
  </property>
  
  <property
    name="_signalLevel"
    access="field"
    type="java.lang.Float"
    not-null="false"
  >
    <meta attribute="field-description">'Standard' signal level, estimated according to signalLevelMethod. the snRatio is defined as signalLevel/noiseLevel.</meta>
    <meta attribute="default-value">null</meta>
    <column name="SIGNALLEVEL" sql-type="FLOAT" not-null="false"/>
  </property>
  
  <property
    name="_storageDetails"
    access="field"
    type="java.lang.String"
    not-null="false"
  >
    <meta attribute="field-description">Text description of storage for cases not covered by standard algorithms (isNormalStorage false).</meta>
    <meta attribute="default-value">null</meta>
    <column name="STORAGEDETAILS" sql-type="TEXT" not-null="false"/>
  </property>
  
  <list
    name="hbApplicationData"
    table="NMR_DATASOURCE2APPLDATA"
      schema="nmr" 
    access="property"
    cascade="all"
  >
    <meta attribute="field-description">Application-specific data</meta>
    <key column="DATAOBJECTID"/>
    <list-index column="ORDER_applicationData_" base="1"/>
    <many-to-many
      column="APPLICATIONDATAID"
      class="memops.api.Implementation.ApplicationData"
      foreign-key="IMPL_DATAOBJECT_APPLDATA_FK"
      unique="true">
    </many-to-many>
  </list>
  
  <many-to-one
    name="hbAccess"
    column="ACCESSID"
    class="memops.api.AccessControl.AccessObject" 
    not-null="false"
    unique="true"
    foreign-key="IMPL_DATAOBJECT_ACCESS_FK" 
  >
    <meta attribute="field-description">Access object that controls object access</meta>
  </many-to-one>
  
  <many-to-one
    name="hbActivePeakList"
    column="ACTIVEPEAKLISTID"
    class="ccp.api.nmr.Nmr.PeakList" 
    not-null="false"
    unique="false"
    foreign-key="NMR_DATASOURCE_ACTIPEAKLIST_FK" 
  >
    <meta attribute="field-description">Currently active peaklist for DataSource - i.e. PeakList where newly picked peaks will be placed.</meta>
  </many-to-one>
  
  <many-to-one
    name="hbCompressMethod"
    column="COMPRESSMETHODID"
    class="ccp.api.general.Method.Method" 
    cascade="merge,save-update"
    not-null="false"
    unique="false"
    foreign-key="NMR_DATASOURCE_COMPMETH_FK" 
  >
    <meta attribute="field-description">Method used for data compression.</meta>
  </many-to-one>
  
  <many-to-one
    name="hbDataStore"
    column="DATASTOREID"
    class="ccp.api.general.DataLocation.NumericMatrix" 
    cascade="merge,save-update"
    not-null="false"
    unique="false"
    foreign-key="NMR_DATASOURCE_DATASTORE_FK" 
  >
    <meta attribute="field-description">Data store where data are located</meta>
  </many-to-one>
  
  <many-to-one
    name="hbExperiment"
    column="EXPERIMENTID"
    class="ccp.api.nmr.Nmr.Experiment" 
    cascade="merge,save-update"
    not-null="true"
    unique="false"
    foreign-key="NMR_DATASOURCE_EXPERIMENT_FK" 
    unique-key="dataSourceUniqueKey" 
  >
    <meta attribute="field-description">parent link</meta>
  </many-to-one>
  
  <many-to-one
    name="hbProcessMethod"
    column="PROCESSMETHODID"
    class="ccp.api.general.Method.Method" 
    cascade="merge,save-update"
    not-null="false"
    unique="false"
    foreign-key="NMR_DATASOURCE_PROCMETH_FK" 
  >
    <meta attribute="field-description">Method used for processing DataSource.</meta>
  </many-to-one>
  
  <many-to-one
    name="hbProcessedFrom"
    column="PROCESSEDFROMID"
    class="ccp.api.nmr.Nmr.DataSource" 
    not-null="false"
    unique="false"
    foreign-key="NMR_DATASOURCE_PROCFROM_FK" 
  >
    <meta attribute="field-description">DataSource used to create the current DataSource. If there are several 'ancestor' DataSources stored, this should link to the most recent ancestor. E.g. the pre-FT data if the current data were Fourier transformed.</meta>
  </many-to-one>
  
  <many-to-one
    name="hbSnMethod"
    column="SNMETHODID"
    class="ccp.api.general.Method.Method" 
    cascade="merge,save-update"
    not-null="false"
    unique="false"
    foreign-key="NMR_DATASOURCE_SNMETHOD_FK" 
  >
    <meta attribute="field-description">Method used to determine S/N ratio</meta>
  </many-to-one>
  
  <set 
    name="hbDataDims" 
    table="NMR_ABSTRACTDATADIM"
      schema="nmr" 
    inverse="true" 
    cascade="all"
  >
    <meta attribute="field-description">child link</meta>
    <meta attribute="base-name">hbDataDim</meta>
    <cache usage="read-write"/>
    <key column="DATASOURCEID"/>
    <one-to-many class="ccp.api.nmr.Nmr.AbstractDataDim"/>
  </set>
  
  <set 
    name="hbDataSourceImages" 
    table="NMR_DATASOURCEIMAGE"
      schema="nmr" 
    inverse="true" 
    cascade="all"
  >
    <meta attribute="field-description">N/A</meta>
    <meta attribute="base-name">hbDataSourceImage</meta>
    <cache usage="read-write"/>
    <key column="DATASOURCEID"/>
    <one-to-many class="ccp.api.nmr.Nmr.DataSourceImage"/>
  </set>
  
  <set 
    name="hbPeakLists" 
    table="NMR_PEAKLIST"
      schema="nmr" 
    inverse="true" 
    cascade="all"
  >
    <meta attribute="field-description">N/A</meta>
    <meta attribute="base-name">hbPeakList</meta>
    <cache usage="read-write"/>
    <key column="DATASOURCEID"/>
    <one-to-many class="ccp.api.nmr.Nmr.PeakList"/>
  </set>
  
  <set 
    name="hbProcessedTo" 
    table="NMR_DATASOURCE"
      schema="nmr" 
    inverse="true" 
    cascade="none"
  >
    <meta attribute="field-description">DataSources derived directly from the current DataSource.</meta>
    <meta attribute="base-name">hbProcessedTo</meta>
    <cache usage="read-write"/>
    <key column="PROCESSEDFROMID"/>
    <one-to-many class="ccp.api.nmr.Nmr.DataSource"/>
  </set>
  
  <set 
    name="hbSparseSamplings" 
    table="NMR_SPARSESAMPLING"
      schema="nmr" 
    inverse="true" 
    cascade="all"
  >
    <meta attribute="field-description">N/A</meta>
    <meta attribute="base-name">hbSparseSampling</meta>
    <cache usage="read-write"/>
    <key column="DATASOURCEID"/>
    <one-to-many class="ccp.api.nmr.Nmr.SparseSampling"/>
  </set>

  </class>

</hibernate-mapping>
