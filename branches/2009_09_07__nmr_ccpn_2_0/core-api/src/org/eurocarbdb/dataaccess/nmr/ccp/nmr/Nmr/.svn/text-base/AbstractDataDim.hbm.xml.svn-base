<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC
  "-//Hibernate/Hibernate Mapping DTD//EN"
  "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd" >

<hibernate-mapping auto-import="false" package="ccp.api.nmr.Nmr">
  <class
    name="AbstractDataDim"
    table="NMR_ABSTRACTDATADIM"
    schema="nmr" 
  >
  <meta attribute="extends" inherit="false">memops.general.AbstractModelObject</meta>
  <meta attribute="implements">java.lang.Comparable</meta>
  <meta attribute="class-description">Information about the individual dimensions in the data source. Each DataDim object corresponds to a single ExpDim object. Note that abstractDataDim.dim need not be equal to the corresponding expDim.dim.</meta>
  <cache usage="read-write"/>

  <id
    name="_dbId"
    access="field"
    column="DATAOBJECTID"
    type="java.lang.Long">
    <meta attribute="scope-set">protected</meta>
    <generator class="native"/>
  </id>
  
  <many-to-one
    name="_topObject"
    access="field"
    column="TOPOBJECTID"
    class="ccp.api.nmr.Nmr.NmrProject"
    not-null="true"
    unique="false"
    foreign-key="NMR_ABSTDATADIM_NMRPROJECT_TO_FK"
  >
    <meta attribute="field-description">hard coded link to topObject</meta>
  </many-to-one>
  
  <property
    name="_dim"
    access="field"
    type="java.lang.Integer"
    not-null="true"
  >
    <meta attribute="field-description">Dimension number. Dimensions go from 1 to numDim. For projections that means the numDim of the dataSource, not of the experiment. dim for an AbstractDataDim can be set independently of the dim for the corresponding ExpDim, although it is recommended that the acquisition dimension (if present) be given dim 1. The dim values correspond to the storage order in the corresponding file, 1 being the fastest varying dim.</meta>
    <meta attribute="default-value">null</meta>
    <column name="DIM" sql-type="INTEGER" not-null="true" unique-key="abstractDataDimUniqueKey" />
  </property>
  
  <property
    name="_fileDim"
    access="field"
    type="java.lang.Integer"
    not-null="false"
  >
    <meta attribute="field-description">Corresponding dimension in the dataSource (an integer, starting at zero).</meta>
    <meta attribute="default-value">null</meta>
    <column name="FILEDIM" sql-type="INTEGER" not-null="false"/>
  </property>
  
  <property
    name="_isComplex"
    access="field"
    type="java.lang.Boolean"
    not-null="true"
  >
    <meta attribute="field-description">Defines whether the underlying data are complex, i.e. whether both real and imaginary values are stored.</meta>
    <meta attribute="default-value">null</meta>
    <column name="ISCOMPLEX" sql-type="BOOLEAN" not-null="true"/>
  </property>
  
  <property
    name="_numPoints"
    access="field"
    type="java.lang.Integer"
    not-null="true"
  >
    <meta attribute="field-description">Number of points. When isComplex is True, numPoints is the number of complex points (i.e. the number of time values for an FID), not the number of real numbers stored, so that 1024 complex points take up the same pace as 2048 real points. numPoints measures the size of the stored file, whether or not all storage slots contain meaningful data. For a SampledDataDim numPoints must be equal to the length of the pointValues array. For sparse sampling this described the grid sampled on, not the number of actual points.</meta>
    <meta attribute="default-value">null</meta>
    <column name="NUMPOINTS" sql-type="INTEGER" not-null="true"/>
  </property>
  
  <property
    name="_shapeSerial"
    access="field"
    type="java.lang.Integer"
    not-null="false"
  >
    <meta attribute="field-description">Serial number of corresponding DataSourceShape, if any. Note that several AbstractDataDims may correspond to the same DataSourceShape.</meta>
    <meta attribute="default-value">null</meta>
    <column name="SHAPESERIAL" sql-type="INTEGER" not-null="false"/>
  </property>
  
  <property
    name="_unit"
    access="field"
    type="java.lang.String" length="32"
    not-null="false"
  >
    <meta attribute="field-description">unit for values on dimension axis. Typically seconds for a normal FID. For a frequency dimension unit is Herz, *not* ppm. Note that values in ppm (and equivalent) require referencing, and that referencing belongs to the DataDimRef, not to the DataDim.</meta>
    <meta attribute="default-value">null</meta>
    <column name="UNIT" sql-type="VARCHAR(32)" length="32" not-null="false"/>
  </property>
  
  <list
    name="hbApplicationData"
    table="NMR_ABSTDATADIM2APPLDATA"
      schema="nmr" 
    access="property"
    cascade="all"
  >
    <meta attribute="field-description">Application-specific data</meta>
    <key column="DATAOBJECTID"/>
    <list-index column="ORDER_applicationData_" base="1"/>
    <many-to-many
      column="APPLICATIONDATAID"
      class="memops.api.Implementation.ApplicationData"
      foreign-key="IMPL_DATAOBJECT_APPLDATA_FK"
      unique="true">
    </many-to-many>
  </list>
  
  <many-to-one
    name="hbAccess"
    column="ACCESSID"
    class="memops.api.AccessControl.AccessObject" 
    not-null="false"
    unique="true"
    foreign-key="IMPL_DATAOBJECT_ACCESS_FK" 
  >
    <meta attribute="field-description">Access object that controls object access</meta>
  </many-to-one>
  
  <many-to-one
    name="hbDataSource"
    column="DATASOURCEID"
    class="ccp.api.nmr.Nmr.DataSource" 
    cascade="merge,save-update"
    not-null="true"
    unique="false"
    foreign-key="NMR_ABSTDATADIM_DATASOURCE_FK" 
    unique-key="abstractDataDimUniqueKey" 
  >
    <meta attribute="field-description">parent link</meta>
  </many-to-one>
  
  <many-to-one
    name="hbExpDim"
    column="EXPDIMID"
    class="ccp.api.nmr.Nmr.ExpDim" 
    cascade="merge,save-update"
    not-null="true"
    unique="false"
    foreign-key="NMR_ABSTDATADIM_EXPDIM_FK" 
  >
    <meta attribute="field-description">ExpDim corresponding to DataDim</meta>
  </many-to-one>
  
  <many-to-one
    name="hbPredictMethod"
    column="PREDICTMETHODID"
    class="ccp.api.general.Method.Method" 
    cascade="merge,save-update"
    not-null="false"
    unique="false"
    foreign-key="NMR_ABSTDATADIM_PREDMETH_FK" 
  >
    <meta attribute="field-description">Linear prediction method.</meta>
  </many-to-one>
  
  <set 
    name="hbDimensionScalings" 
    table="NMR_DIMENSIONSCALING"
      schema="nmr" 
    inverse="true" 
    cascade="all"
  >
    <meta attribute="field-description">N/A</meta>
    <meta attribute="base-name">hbDimensionScaling</meta>
    <cache usage="read-write"/>
    <key column="DATADIMID"/>
    <one-to-many class="ccp.api.nmr.Nmr.DimensionScaling"/>
  </set>

  </class>

</hibernate-mapping>
