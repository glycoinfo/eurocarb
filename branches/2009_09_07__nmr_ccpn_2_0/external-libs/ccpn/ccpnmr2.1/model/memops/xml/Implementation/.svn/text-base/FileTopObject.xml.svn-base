<?xml version='1.0'?>
<!--
#######################################################################

CCPN Data Model version 2.0.b3

Autogenerated by XmlModelIo revision 1.17 on ?
  from data model element memops.Implementation.FileTopObject revision ?

#######################################################################
======================COPYRIGHT/LICENSE START==========================

FileTopObject.xml: xmlmodel model for CCPN data model, MetaClass memops.Implementation.FileTopObject

Copyright (C) 2007  (CCPN Project)

=======================================================================

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.
 
A copy of this license can be found in ../../../../license/LGPL.license
 
This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
Lesser General Public License for more details.
 
You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA


======================COPYRIGHT/LICENSE END============================

for further information, please contact :

- CCPN website (http://www.ccpn.ac.uk/)

- email: ccpn@bioc.cam.ac.uk

=======================================================================

If you are using this software for academic purposes, we suggest
quoting the following references:

===========================REFERENCE START=============================
Rasmus H. Fogh, Wayne Boucher, Wim F. Vranken, Anne
Pajon, Tim J. Stevens, T.N. Bhat, John Westbrook, John M.C. Ionides and
Ernest D. Laue (2005). A framework for scientific data modeling and automated
software development. Bioinformatics 21, 1678-1684.


This file was generated with the Memops software generation framework,
and contains original contributions embedded in the framework

===========================REFERENCE END===============================
-->

<MetaClass name="FileTopObject"
 guid="www.ccpn.ac.uk_Fogh_2007-10-03-14:53:27_00001"
 container="www.ccpn.ac.uk_Fogh_2006-08-16-14:22:53_00025"
 isAbstract="true" isImplicit="false" isLeaf="false" isRoot="false"
 isSingleton="false" partitionsChildren="false" visibility="public_vis">
  <documentation>Object to hold file and URL information for a package, *not* including memops.Implementation</documentation>
  <supertypes>
    <item>www.ccpn.ac.uk_Fogh_2006-08-16-14:22:53_00048</item>
  </supertypes>
  <taggedValues>
    <item tag="repositoryId">$Id: FileTopObject.xml,v 1.52.2.10 2009/09/14 14:45:21 wimvranken Exp $</item>
    <item tag="repositoryTag">$Name: release_2_1_0_2 $</item>
  </taggedValues>


  <MetaOperation name="load"
   guid="www.ccpn.ac.uk_Fogh_2006-09-14-18:48:27_00001"
   container="www.ccpn.ac.uk_Fogh_2007-10-03-14:53:27_00001"
   isAbstract="false" isImplicit="false" isQuery="false" opType="other"
   scope="instance_level" visibility="public_vis">
    <documentation>Load data corresponding to TopObject</documentation>
    <target>www.ccpn.ac.uk_Fogh_2006-09-14-18:48:27_00001</target>
    <codeStubs>
      <item tag="java">java.util.List&lt;? extends memops.api.Implementation.Repository&gt; repositories = getActiveRepositories();
if (!repositories.isEmpty())
  loadFrom(repositories.get(0));
else
  throw new memops.general.ApiException("No active repository found for TopObject" + this);</item>
      <item tag="python">repositories = self.activeRepositories
if repositories:
  self.loadFrom(repositories[0])
else:
  raise ApiError('No active repository found for TopObject %s' % self)</item>
    </codeStubs>
  </MetaOperation>

  <MetaOperation name="loadFrom"
   guid="www.ccpn.ac.uk_Fogh_2007-04-23-15:11:29_00009"
   container="www.ccpn.ac.uk_Fogh_2007-10-03-14:53:27_00001"
   isAbstract="false" isImplicit="false" isQuery="false" opType="other"
   scope="instance_level" visibility="public_vis">
    <documentation>Load TopObject from specific Repository</documentation>
    <target>www.ccpn.ac.uk_Fogh_2007-04-23-15:11:29_00009</target>
    <codeStubs>
      <item tag="java">// NB must be done by direct access
if (getIsLoaded() || getInConstructor() || getIsReading()) {
  System.out.println("WARNING " + this + ": cannot be loaded while isLoaded = " + getIsLoaded() + ", inConstructor = " + getInConstructor() + ", isReading = " + getIsReading());
  return;
}

if ("xml".equals(repository.getFormat()) &amp;&amp; "file".equals(repository.getUrl().getProtocol())) {
  if (getParent() == null)
    // MemopsRoot
    throw new memops.general.ApiException(this + ": MemopsRoot can not be (re)loaded");

  if (repository != getActiveRepositories().get(0)) {
    if (getIsModifiable())
      _isModified = true;
    else
      throw new memops.general.ApiException(this + ": attempt to load non-modifiable TopObject from alternative repository " + repository);
  }

  memops.format.xml.Io.loadTopObject(repository.getUrl().getDataLocation(), this);
} else {
  throw new memops.general.ApiException(repository + ": format " + repository.getFormat() + ", protocol " + repository.getUrl().getProtocol() + ", not supported");
}</item>
      <item tag="python"># NB must be done by direct access
if self.isLoaded or self.inConstructor or self.isReading:
  print ("WARNING %s: cannot be loaded while isLoaded:%s, inConstructor:%s, isReading:%s"
                       % (self, self.isLoaded, self.inConstructor, self.isReading))
  return

if  repository.format == 'xml' and repository.url.protocol == 'file':

  if self.parent is None:
    # MemopsRoot
      raise ApiError(" %s: MemopsRoot can not be (re)loaded" % self)
    
  if repository is not self.activeRepositories[0]:
    if self.isModifiable:
      dataDict['isModified'] = True

    else:
      raise ApiError(" %s: attempt to load non-modifiable TopObject from alternative repository %s" % (self, repository))
  
  from memops.format.xml import XmlIO
  XmlIO.loadTopObject(repository.url.getDataLocation(), self)
  
  # NBNB recent addition
  # resets upgraded refData objects to unmodified
  if repository.name == 'refData' and repository is self.activeRepositories[0]:
    self.__dict__['isModified'] = False
  
else:
  raise ApiError(" %s: format %s, protocol %s not supported"
                       % (repository, repository.format, repository.url.protocol))</item>
    </codeStubs>


    <MetaParameter name="repository"
     guid="www.ccpn.ac.uk_Fogh_2007-10-03-14:53:28_00001"
     container="www.ccpn.ac.uk_Fogh_2007-04-23-15:11:29_00009"
     direction="in_dir" hicard="1" isImplicit="false" isOrdered="false"
     isUnique="true" locard="1">
      <documentation>Repository to load from</documentation>
      <valueType>www.ccpn.ac.uk_Fogh_2006-09-14-16:28:57_00004</valueType>
    </MetaParameter>
  </MetaOperation>

  <MetaOperation name="restore"
   guid="www.ccpn.ac.uk_Fogh_2007-04-23-15:11:29_00012"
   container="www.ccpn.ac.uk_Fogh_2007-10-03-14:53:27_00001"
   isAbstract="false" isImplicit="false" isQuery="false" opType="other"
   scope="instance_level" visibility="public_vis">
    <documentation>restore data from current backup location</documentation>
    <target>www.ccpn.ac.uk_Fogh_2007-04-23-15:11:29_00012</target>
    <codeStubs>
      <item tag="java">memops.api.Implementation.Repository repository = getRoot().findFirstRepository("name", "backup");
if (repository != null)
  loadFrom(repository);
else
  throw new memops.general.ApiException("No backup repository found for TopObject " + this);</item>
      <item tag="python">repository = self.root.findFirstRepository(name="backup")
if repository:
  self.loadFrom(repository)
else:
  raise ApiError('No backup repository found for TopObject %s' % self)</item>
    </codeStubs>
  </MetaOperation>
</MetaClass>

