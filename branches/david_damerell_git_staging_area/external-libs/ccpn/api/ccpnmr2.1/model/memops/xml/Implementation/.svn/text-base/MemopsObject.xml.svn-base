<?xml version='1.0'?>
<!--
#######################################################################

CCPN Data Model version 2.0.b3

Autogenerated by XmlModelIo revision 1.17 on ?
  from data model element memops.Implementation.MemopsObject revision ?

#######################################################################
======================COPYRIGHT/LICENSE START==========================

MemopsObject.xml: xmlmodel model for CCPN data model, MetaClass memops.Implementation.MemopsObject

Copyright (C) 2007  (CCPN Project)

=======================================================================

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.
 
A copy of this license can be found in ../../../../license/LGPL.license
 
This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
Lesser General Public License for more details.
 
You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA


======================COPYRIGHT/LICENSE END============================

for further information, please contact :

- CCPN website (http://www.ccpn.ac.uk/)

- email: ccpn@bioc.cam.ac.uk

=======================================================================

If you are using this software for academic purposes, we suggest
quoting the following references:

===========================REFERENCE START=============================
Rasmus H. Fogh, Wayne Boucher, Wim F. Vranken, Anne
Pajon, Tim J. Stevens, T.N. Bhat, John Westbrook, John M.C. Ionides and
Ernest D. Laue (2005). A framework for scientific data modeling and automated
software development. Bioinformatics 21, 1678-1684.


This file was generated with the Memops software generation framework,
and contains original contributions embedded in the framework

===========================REFERENCE END===============================
-->

<MetaClass name="MemopsObject"
 guid="www.ccpn.ac.uk_Fogh_2006-08-16-14:22:53_00027"
 container="www.ccpn.ac.uk_Fogh_2006-08-16-14:22:53_00025"
 isAbstract="true" isImplicit="false" isLeaf="false" isRoot="false"
 isSingleton="false" partitionsChildren="false" visibility="public_vis">
  <documentation>Base class for Memops data model classes. 
Contains elements common to all classes, e.g. the link to ApplicationData, and the root and parent links. </documentation>
  <supertypes>
    <item>www.ccpn.ac.uk_Fogh_2007-10-18-17:15:48_00001</item>
  </supertypes>
  <taggedValues>
    <item tag="repositoryId">$Id: MemopsObject.xml,v 1.50.2.10 2009/09/14 14:45:21 wimvranken Exp $</item>
    <item tag="repositoryTag">$Name: release_2_1_0_2 $</item>
  </taggedValues>


  <MetaOperation name="getExpandedKey"
   guid="www.ccpn.ac.uk_Fogh_2007-05-03-16:57:50_00001"
   container="www.ccpn.ac.uk_Fogh_2006-08-16-14:22:53_00027"
   isAbstract="false" isImplicit="false" isQuery="true" opType="otherQuery"
   scope="instance_level" visibility="public_vis">
    <documentation>get expanded (object-free) versio of full key, for comparing objects from different trees.</documentation>
    <target>www.ccpn.ac.uk_Fogh_2007-05-03-16:57:50_00001</target>
    <codeStubs>
      <item tag="java">result = getFullKey();

for (int ii = 0; ii &lt; result.size(); ii++) {
  if (result.get(ii) instanceof memops.api.Implementation.MemopsObject)
    result.set(ii, ((memops.api.Implementation.MemopsObject) result.get(ii)).getExpandedKey());
}</item>
      <item tag="python">result = self.getFullKey()

for ii in range(len(result)):
  if isinstance(result[ii], MemopsObject):
    result[ii] = result[ii].getExpandedKey()</item>
    </codeStubs>


    <MetaParameter name="result"
     guid="www.ccpn.ac.uk_Fogh_2007-05-03-16:57:50_00002"
     container="www.ccpn.ac.uk_Fogh_2007-05-03-16:57:50_00001"
     direction="return_dir" hicard="-1" isImplicit="false" isOrdered="true"
     isUnique="false" locard="0">
      <valueType>www.ccpn.ac.uk_Fogh_2006-11-17-09:06:35_00001</valueType>
    </MetaParameter>
  </MetaOperation>

  <MetaAttribute name="isDeleted"
   guid="www.ccpn.ac.uk_Fogh_2006-12-31-09:00:59_00012"
   container="www.ccpn.ac.uk_Fogh_2006-08-16-14:22:53_00027"
   baseName="isDeleted" changeability="frozen" hicard="1" isAbstract="false"
   isAutomatic="false" isDerived="false" isImplementation="true"
   isImplicit="false" isOrdered="false" isUnique="true" locard="1"
   scope="instance_level" visibility="public_vis">
    <documentation>Implementation attribute, set automatically. If True the object has been deleted. Deleted objects are never returned by any API call, so there is normally no need to check this attribute. But if you keep your own lists (or other data structures) containing CCP objects, you may need to look.</documentation>
    <valueType>www.ccpn.ac.uk_Fogh_2006-08-16-14:22:53_00028</valueType>
  </MetaAttribute>

  <MetaRole name="root"
   guid="www.ccpn.ac.uk_Fogh_2006-12-31-09:00:59_00010"
   container="www.ccpn.ac.uk_Fogh_2006-08-16-14:22:53_00027"
   baseName="root" changeability="frozen" hicard="1" isAbstract="false"
   isAutomatic="false" isDerived="false" isImplementation="true"
   isImplicit="false" isOrdered="false" isUnique="true" locard="1"
   noDeleteIfSet="false" partitionsChildren="false" scope="instance_level"
   visibility="public_vis">
    <documentation>MemopsRoot object at top of parent tree.</documentation>
    <valueType>www.ccpn.ac.uk_Fogh_2006-08-16-14:22:53_00047</valueType>
  </MetaRole>
</MetaClass>

