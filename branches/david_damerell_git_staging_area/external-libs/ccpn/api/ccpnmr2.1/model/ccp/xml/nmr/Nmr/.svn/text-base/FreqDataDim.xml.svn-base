<?xml version='1.0'?>
<!--
#######################################################################

CCPN Data Model version 2.0.b3

Autogenerated by XmlModelIo revision 1.17 on ?
  from data model element ccp.nmr.Nmr.FreqDataDim revision ?

#######################################################################
======================COPYRIGHT/LICENSE START==========================

FreqDataDim.xml: xmlmodel model for CCPN data model, MetaClass ccp.nmr.Nmr.FreqDataDim

Copyright (C) 2007 Rasmus Fogh (CCPN Project)

=======================================================================

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.
 
A copy of this license can be found in ../../../../../license/LGPL.license
 
This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
Lesser General Public License for more details.
 
You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA


======================COPYRIGHT/LICENSE END============================

for further information, please contact :

- CCPN website (http://www.ccpn.ac.uk/)

- email: ccpn@bioc.cam.ac.uk

=======================================================================

If you are using this software for academic purposes, we suggest
quoting the following references:

===========================REFERENCE START=============================
Wim F. Vranken, Wayne Boucher, Tim J. Stevens, Rasmus
H. Fogh, Anne Pajon, Miguel Llinas, Eldon L. Ulrich, John L. Markley, John
Ionides and Ernest D. Laue (2005). The CCPN Data Model for NMR Spectroscopy:
Development of a Software Pipeline. Proteins 59, 687 - 696.

Rasmus H. Fogh, Wayne Boucher, Wim F. Vranken, Anne
Pajon, Tim J. Stevens, T.N. Bhat, John Westbrook, John M.C. Ionides and
Ernest D. Laue (2005). A framework for scientific data modeling and automated
software development. Bioinformatics 21, 1678-1684.


This file was generated with the Memops software generation framework,
and contains original contributions embedded in the framework

===========================REFERENCE END===============================
-->

<MetaClass name="FreqDataDim"
 guid="www.ccpn.ac.uk_Fogh_2006-08-16-14:22:46_00033"
 container="www.ccpn.ac.uk_Fogh_2006-08-16-14:22:46_00006"
 isAbstract="false" isImplicit="false" isLeaf="false" isRoot="false"
 isSingleton="false" partitionsChildren="false" visibility="public_vis">
  <documentation>A frequency domain dimension in the data source file, i.e. a regularly sampled dimension that is in the Fourier transform domain relative to the original data.</documentation>
  <keyNames>
    <item>dim</item>
  </keyNames>
  <supertypes>
    <item>www.ccpn.ac.uk_Fogh_2006-08-16-14:22:46_00008</item>
  </supertypes>
  <constructorCodeStubs>
    <item tag="java">boolean foundRefData = false;
ccp.api.nmr.Nmr.ExpDim expDim = getExpDim();
java.util.List&lt;ccp.api.nmr.Nmr.ExpDimRef&gt; expDimRefs =
expDim.sortedExpDimRefs();
for (ccp.api.nmr.Nmr.ExpDimRef expDimRef: expDimRefs)
{
  ccp.api.nmr.NmrExpPrototype.RefExpDimRef refExpDimRef =
expDimRef.getRefExpDimRef();
  if (refExpDimRef != null)
  {
    foundRefData = true;
    java.util.List&lt;java.lang.Float&gt; scalingFactors =
refExpDimRef.getValidScalingFactors();
    ccp.api.nmr.Nmr.DimensionScaling x = newDimensionScaling(expDimRef);
    x.setScalingFactors(scalingFactors);
  }
}

if (!foundRefData)
{
  if (expDimRefs.size() != 1)
    expDimRefs =
memops.universal.Util.copyToList(expDim.findAllExpDimRefs("measurementType",
"Shift"));

  if (expDimRefs.size() == 1)
  {
    java.util.List&lt;java.lang.Float&gt; scalingFactors = new
java.util.ArrayList&lt;java.lang.Float&gt;();
    scalingFactors.add(1.0f);
    ccp.api.nmr.Nmr.DimensionScaling x =
newDimensionScaling(expDimRefs.get(0));
    x.setScalingFactors(scalingFactors);
  }
}</item>
    <item tag="python">foundRefData = False
expDimRefs = self.expDim.sortedExpDimRefs()
for expDimRef in expDimRefs:
  refExpDimRef = expDimRef.refExpDimRef
  if refExpDimRef is not None:
    foundRefData = True
    scalingFactors = refExpDimRef.validScalingFactors
    self.newDimensionScaling(expDimRef=expDimRef, scalingFactors=scalingFactors)
if not foundRefData:
  if len(expDimRefs) != 1:
    expDimRefs = list(self.expDim.findAllExpDimRefs(measurementType='Shift'))
  if len(expDimRefs) == 1:
    self.newDimensionScaling(expDimRef=expDimRefs[0], scalingFactors=(1.0,))</item>
  </constructorCodeStubs>
  <taggedValues>
    <item tag="repositoryId">$Id: FreqDataDim.xml,v 1.43.2.10 2009/09/14 14:45:22 wimvranken Exp $</item>
    <item tag="repositoryTag">$Name: release_2_1_0_2 $</item>
  </taggedValues>


  <MetaRole name="dataDimRefs"
   guid="www.ccpn.ac.uk_Fogh_2006-08-16-18:20:07_00022"
   container="www.ccpn.ac.uk_Fogh_2006-08-16-14:22:46_00033"
   baseName="dataDimRef" changeability="changeable" hicard="-1"
   hierarchy="child" isAbstract="false" isAutomatic="false" isDerived="false"
   isImplementation="false" isImplicit="false" isOrdered="false" isUnique="true"
   locard="0" noDeleteIfSet="false" partitionsChildren="false"
   scope="instance_level" visibility="public_vis">
    <otherRole>www.ccpn.ac.uk_Fogh_2006-08-16-18:20:07_00021</otherRole>
    <valueType>www.ccpn.ac.uk_Fogh_2006-08-16-14:22:46_00019</valueType>
  </MetaRole>

  <MetaOperation name="getSpectralWidth"
   guid="www.ccpn.ac.uk_Fogh_2006-08-16-18:20:07_00031"
   container="www.ccpn.ac.uk_Fogh_2006-08-16-14:22:46_00033"
   isAbstract="false" isImplicit="false" isQuery="true" opType="get"
   scope="instance_level" visibility="public_vis">
    <documentation>get function for derived attribute spectralWidth</documentation>
    <target>www.ccpn.ac.uk_Fogh_2006-08-16-18:20:07_00029</target>
    <codeStubs>
      <item tag="java">result = getNumPoints() * java.lang.Math.abs(getValuePerPoint());</item>
      <item tag="python">result = self.numPoints * abs(self.valuePerPoint)</item>
    </codeStubs>
  </MetaOperation>

  <MetaOperation name="getSpectralWidthOrig"
   guid="www.ccpn.ac.uk_Fogh_2006-08-16-18:20:07_00033"
   container="www.ccpn.ac.uk_Fogh_2006-08-16-14:22:46_00033"
   isAbstract="false" isImplicit="false" isQuery="true" opType="get"
   scope="instance_level" visibility="public_vis">
    <documentation>get function for derived attribute spectralWidthOrig</documentation>
    <target>www.ccpn.ac.uk_Fogh_2006-08-16-18:20:07_00030</target>
    <codeStubs>
      <item tag="java">result = getNumPointsOrig() * java.lang.Math.abs(getValuePerPoint());</item>
      <item tag="python">result = self.numPointsOrig * abs(self.valuePerPoint)</item>
    </codeStubs>
  </MetaOperation>

  <MetaAttribute name="numPointsOrig"
   guid="www.ccpn.ac.uk_Fogh_2006-08-16-18:20:07_00023"
   container="www.ccpn.ac.uk_Fogh_2006-08-16-14:22:46_00033"
   baseName="numPointsOrig" changeability="changeable" hicard="1"
   isAbstract="false" isAutomatic="false" isDerived="false"
   isImplementation="false" isImplicit="false" isOrdered="false" isUnique="true"
   locard="1" scope="instance_level" visibility="public_vis">
    <documentation>Original number of points, i.e. number of points before points were removed. The spectalWidthOrig is by definition numPointsOrig * valuePerPoint. Serves to account for cases where points were removed after Fourier transformation.</documentation>
    <valueType>www.ccpn.ac.uk_Fogh_2006-08-16-14:22:53_00032</valueType>
  </MetaAttribute>

  <MetaAttribute name="phase0"
   guid="www.ccpn.ac.uk_Fogh_2006-08-16-18:20:07_00025"
   container="www.ccpn.ac.uk_Fogh_2006-08-16-14:22:46_00033"
   baseName="phase0" changeability="changeable" hicard="1" isAbstract="false"
   isAutomatic="false" isDerived="false" isImplementation="false"
   isImplicit="false" isOrdered="false" isUnique="true" locard="0"
   scope="instance_level" visibility="public_vis">
    <documentation>Zero order phase correction (in degrees) applied after Fourier transformation.</documentation>
    <valueType>www.ccpn.ac.uk_Fogh_2006-08-16-14:22:53_00031</valueType>
  </MetaAttribute>

  <MetaAttribute name="phase1"
   guid="www.ccpn.ac.uk_Fogh_2006-08-16-18:20:07_00026"
   container="www.ccpn.ac.uk_Fogh_2006-08-16-14:22:46_00033"
   baseName="phase1" changeability="changeable" hicard="1" isAbstract="false"
   isAutomatic="false" isDerived="false" isImplementation="false"
   isImplicit="false" isOrdered="false" isUnique="true" locard="0"
   scope="instance_level" visibility="public_vis">
    <documentation>First order phase correction (in degrees) applied after Fourier transformation. By definition the point fo no effect of the first order phase correction is point number one (before removal of points, if any). </documentation>
    <valueType>www.ccpn.ac.uk_Fogh_2006-08-16-14:22:53_00031</valueType>
  </MetaAttribute>

  <MetaAttribute name="pointOffset"
   guid="www.ccpn.ac.uk_Fogh_2006-08-16-18:20:07_00024"
   container="www.ccpn.ac.uk_Fogh_2006-08-16-14:22:46_00033"
   baseName="pointOffset" changeability="changeable" hicard="1"
   isAbstract="false" isAutomatic="false" isDerived="false"
   isImplementation="false" isImplicit="false" isOrdered="false" isUnique="true"
   locard="1" scope="instance_level" visibility="public_vis">
    <documentation>Offset of first point, in point numbers relative to original number of points. To account for cases where points have been removed after Fourier transformation. The current point number 1 corresponds to the original point number 1+pointOffset.</documentation>
    <valueType>www.ccpn.ac.uk_Fogh_2006-08-16-14:22:53_00032</valueType>
    <defaultValue>
      <item>0</item>
    </defaultValue>
  </MetaAttribute>

  <MetaAttribute name="spectralWidth"
   guid="www.ccpn.ac.uk_Fogh_2006-08-16-18:20:07_00029"
   container="www.ccpn.ac.uk_Fogh_2006-08-16-14:22:46_00033"
   baseName="spectralWidth" changeability="frozen" hicard="1" isAbstract="false"
   isAutomatic="false" isDerived="true" isImplementation="false"
   isImplicit="false" isOrdered="false" isUnique="true" locard="0"
   scope="instance_level" visibility="public_vis">
    <documentation>Current spectral width (not including deleted points), in unit of the FreqDataDim, typically in Hz. Defined as numPoints * valuePerPoint</documentation>
    <valueType>www.ccpn.ac.uk_Fogh_2006-08-16-14:22:53_00031</valueType>
  </MetaAttribute>

  <MetaAttribute name="spectralWidthOrig"
   guid="www.ccpn.ac.uk_Fogh_2006-08-16-18:20:07_00030"
   container="www.ccpn.ac.uk_Fogh_2006-08-16-14:22:46_00033"
   baseName="spectralWidthOrig" changeability="frozen" hicard="1"
   isAbstract="false" isAutomatic="false" isDerived="true"
   isImplementation="false" isImplicit="false" isOrdered="false" isUnique="true"
   locard="0" scope="instance_level" visibility="public_vis">
    <documentation>Spectral width in unit of FreqDataDim(typically in Hz) of original spectrum (before removal of points) This is the value that serves for calculation of folding etc.
Defined as numPointsOrig*valuePerPoint.</documentation>
    <valueType>www.ccpn.ac.uk_Fogh_2006-08-16-14:22:53_00031</valueType>
  </MetaAttribute>

  <MetaAttribute name="valuePerPoint"
   guid="www.ccpn.ac.uk_Fogh_2006-08-16-18:20:07_00027"
   container="www.ccpn.ac.uk_Fogh_2006-08-16-14:22:46_00033"
   baseName="valuePerPoint" changeability="changeable" hicard="1"
   isAbstract="false" isAutomatic="false" isDerived="false"
   isImplementation="false" isImplicit="false" isOrdered="false" isUnique="true"
   locard="1" scope="instance_level" visibility="public_vis">
    <documentation>Conversion between point number and frequency - in the normal case conversion between point number and Herz. Does *not* include any corrections for scaling etc.</documentation>
    <valueType>www.ccpn.ac.uk_Fogh_2006-08-16-14:22:53_00031</valueType>

    <!-- Start constraints for <MetaAttribute: ccp.nmr.Nmr.FreqDataDim.valuePerPoint>: -->
    <MetaConstraint name="non_zero"
     guid="www.ccpn.ac.uk_Fogh_2006-08-16-18:20:07_00028"
     container="www.ccpn.ac.uk_Fogh_2006-08-16-18:20:07_00027"
     isImplicit="false">
      <codeStubs>
        <item tag="java">(value != 0.0f)</item>
        <item tag="python">value != 0.0</item>
      </codeStubs>
    </MetaConstraint>
    <!-- End constraints for <MetaAttribute: ccp.nmr.Nmr.FreqDataDim.valuePerPoint>: -->
  </MetaAttribute>
</MetaClass>

