<?xml version='1.0'?>
<!--
#######################################################################

CCPN Data Model version 2.0.b3

Autogenerated by XmlModelIo revision 1.17 on ?
  from data model element ccp.nmr.NmrCalc.ConstraintStoreData revision ?

#######################################################################
======================COPYRIGHT/LICENSE START==========================

ConstraintStoreData.xml: xmlmodel model for CCPN data model, MetaClass ccp.nmr.NmrCalc.ConstraintStoreData

Copyright (C) 2007  (CCPN Project)

=======================================================================

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.
 
A copy of this license can be found in ../../../../../license/LGPL.license
 
This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
Lesser General Public License for more details.
 
You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA


======================COPYRIGHT/LICENSE END============================

for further information, please contact :

- CCPN website (http://www.ccpn.ac.uk/)

- email: ccpn@bioc.cam.ac.uk

=======================================================================

If you are using this software for academic purposes, we suggest
quoting the following references:

===========================REFERENCE START=============================
Rasmus H. Fogh, Wayne Boucher, Wim F. Vranken, Anne
Pajon, Tim J. Stevens, T.N. Bhat, John Westbrook, John M.C. Ionides and
Ernest D. Laue (2005). A framework for scientific data modeling and automated
software development. Bioinformatics 21, 1678-1684.


This file was generated with the Memops software generation framework,
and contains original contributions embedded in the framework

===========================REFERENCE END===============================
-->

<MetaClass name="ConstraintStoreData"
 guid="www.ccpn.ac.uk_Fogh_2009-04-16-16:23:58_00005"
 container="www.ccpn.ac.uk_Fogh_2009-04-16-16:23:57_00001"
 isAbstract="false" isImplicit="false" isLeaf="false" isRoot="false"
 isSingleton="false" partitionsChildren="false" visibility="public_vis">
  <keyNames>
    <item>serial</item>
  </keyNames>
  <supertypes>
    <item>www.ccpn.ac.uk_Fogh_2009-04-16-16:23:57_00006</item>
  </supertypes>
  <taggedValues>
    <item tag="repositoryId">$Id: ConstraintStoreData.xml,v 1.4.2.2 2009/09/14 14:45:25 wimvranken Exp $</item>
    <item tag="repositoryTag">$Name: release_2_1_0_2 $</item>
  </taggedValues>


  <MetaAttribute name="constraintListSerials"
   guid="www.ccpn.ac.uk_Fogh_2009-04-16-16:24:03_00004"
   container="www.ccpn.ac.uk_Fogh_2009-04-16-16:23:58_00005"
   baseName="constraintListSerial" changeability="changeable" hicard="-1"
   isAbstract="false" isAutomatic="false" isDerived="false"
   isImplementation="false" isImplicit="false" isOrdered="true" isUnique="true"
   locard="0" scope="instance_level" visibility="public_vis">
    <documentation>serials for ConstraintLists containing data - if empty use all available ConstraintLists</documentation>
    <valueType>www.ccpn.ac.uk_Fogh_2006-08-16-14:22:53_00032</valueType>
  </MetaAttribute>

  <MetaRole name="constraintLists"
   guid="www.ccpn.ac.uk_Fogh_2009-04-16-16:24:03_00001"
   container="www.ccpn.ac.uk_Fogh_2009-04-16-16:23:58_00005"
   baseName="constraintList" changeability="changeable" hicard="-1"
   isAbstract="false" isAutomatic="false" isDerived="true"
   isImplementation="false" isImplicit="false" isOrdered="true" isUnique="true"
   locard="0" noDeleteIfSet="false" partitionsChildren="false"
   scope="instance_level" visibility="public_vis">
    <documentation>NmrConstraint.ConstraintLists containing data</documentation>
    <valueType>www.ccpn.ac.uk_Fogh_2006-08-16-14:22:51_00023</valueType>
  </MetaRole>

  <MetaAttribute name="constraintStoreSerial"
   guid="www.ccpn.ac.uk_Fogh_2009-04-16-16:24:03_00003"
   container="www.ccpn.ac.uk_Fogh_2009-04-16-16:23:58_00005"
   baseName="constraintStoreSerial" changeability="changeable" hicard="1"
   isAbstract="false" isAutomatic="false" isDerived="false"
   isImplementation="false" isImplicit="false" isOrdered="false" isUnique="true"
   locard="1" scope="instance_level" visibility="public_vis">
    <documentation>serial of NmrConstraintStore containing data - used to derive actual object.</documentation>
    <valueType>www.ccpn.ac.uk_Fogh_2006-08-16-14:22:53_00032</valueType>
  </MetaAttribute>

  <MetaOperation name="getConstraintLists"
   guid="www.ccpn.ac.uk_Fogh_2009-04-16-16:24:03_00005"
   container="www.ccpn.ac.uk_Fogh_2009-04-16-16:23:58_00005"
   isAbstract="false" isImplicit="false" isQuery="true" opType="get"
   scope="instance_level" visibility="public_vis">
    <documentation>getter for derived link constraintLists</documentation>
    <target>www.ccpn.ac.uk_Fogh_2009-04-16-16:24:03_00001</target>
    <codeStubs>
      <item tag="java">ccp.api.nmr.NmrConstraint.NmrConstraintStore ncstore = getRoot().findFirstNmrConstraintStore("serial", getConstraintStoreSerial());
if (ncstore != null) {
 java.util.List&lt;java.lang.Integer&gt; serials = getConstraintListSerials();
 if (!serials.isEmpty()) {
   result = new java.util.ArrayList&lt;ccp.api.nmr.NmrConstraint.AbstractConstraintList&gt;();
   for (ccp.api.nmr.NmrConstraint.AbstractConstraintList x: ncstore.getConstraintLists()) {
     if (serials.contains(x.getSerial()))
       result.add(x);
   }
 } else {
   result = ncstore.getConstraintLists();
 }
} else {
 result = new java.util.ArrayList&lt;ccp.api.nmr.NmrConstraint.AbstractConstraintList&gt;();
}</item>
      <item tag="python">ncstore = self.root.findFirstNmrConstraintStore(serial=self.constraintStoreSerial)
if ncstore:
  serials = self.constraintListSerials
  if serials:
    result = frozenset(x for x in ncstore.constraintLists if x.serial in serials)
  else:
    result = ncstore.constraintLists
else:
  result = frozenset()</item>
    </codeStubs>
  </MetaOperation>

  <MetaOperation name="getNmrConstraintStore"
   guid="www.ccpn.ac.uk_Fogh_2009-05-20-16:32:16_00002"
   container="www.ccpn.ac.uk_Fogh_2009-04-16-16:23:58_00005"
   isAbstract="false" isImplicit="false" isQuery="true" opType="get"
   scope="instance_level" visibility="public_vis">
    <documentation>getter for derived link nmrConstraintStore</documentation>
    <target>www.ccpn.ac.uk_Fogh_2009-05-20-16:32:16_00001</target>
    <codeStubs>
      <item tag="java">result = getMemopsRoot().findFirstNmrConstraintStore("serial", getConstraintStoreSerial());</item>
      <item tag="python">result = self.root.findFirstNmrConstraintStore(serial=self.constraintStoreSerial)</item>
    </codeStubs>
  </MetaOperation>

  <MetaRole name="nmrConstraintStore"
   guid="www.ccpn.ac.uk_Fogh_2009-05-20-16:32:16_00001"
   container="www.ccpn.ac.uk_Fogh_2009-04-16-16:23:58_00005"
   baseName="nmrConstraintStore" changeability="changeable" hicard="1"
   isAbstract="false" isAutomatic="false" isDerived="true"
   isImplementation="false" isImplicit="false" isOrdered="false" isUnique="true"
   locard="0" noDeleteIfSet="false" partitionsChildren="false"
   scope="instance_level" visibility="public_vis">
    <documentation>NmrConstraintStore with constraint data</documentation>
    <valueType>www.ccpn.ac.uk_Fogh_2006-08-16-14:22:48_00014</valueType>
  </MetaRole>

  <MetaOperation name="setConstraintLists"
   guid="www.ccpn.ac.uk_Fogh_2009-04-16-16:24:03_00006"
   container="www.ccpn.ac.uk_Fogh_2009-04-16-16:23:58_00005"
   isAbstract="false" isImplicit="false" isQuery="false" opType="set"
   scope="instance_level" visibility="public_vis">
    <documentation>setter for derived link constraintLists</documentation>
    <target>www.ccpn.ac.uk_Fogh_2009-04-16-16:24:03_00001</target>
    <codeStubs>
      <item tag="java">if ((values != null) &amp;&amp; !values.isEmpty()) {
  java.util.Set&lt;ccp.api.nmr.NmrConstraint&gt; stores = new java.util.HashSet&lt;ccp.api.nmr.NmrConstraint&gt;();
  for (ccp.api.nmr.NmrConstraint.AbstractConstraintList x: values)
    stores.add(x.getNmrConstraintStore());
  if (stores.size() == 1) {
    setConstraintStoreSerial(stores.iterator().next().getSerial());
    java.util.List&lt;java.lang.Integer&gt; constraintListSerials = new java.util.ArrayList&lt;java.lang.Integer&gt;();
    for (ccp.api.nmr.NmrConstraint.AbstractConstraintList x: values)
      constraintListSerials.add(x.getSerial());
    setConstraintListSerials(constraintListSerials);
  } else {
    throw new memops.general.ApiException("ConstraintLists are from different NmrConstraintStores:" + values);
  }
} else {
  setConstraintListSerials(new java.util.HashSet&lt;java.lang.Integer&gt;());
  setConstraintStoreSerial(null);
}</item>
      <item tag="python">if values:
  stores = set(x.nmrConstraintStore for x in values)
  if len(stores) == 1:
    self.constraintStoreSerial = stores.pop().serial
    self.constraintListSerials = [x.serial for x in values]
  else:
    raise ApiError("ConstraintLists are from different NmrConstraintStores: %s" % values)
else:
  self.constraintListSerials = ()
  self.constraintStoreSerial = None</item>
    </codeStubs>
  </MetaOperation>

  <MetaOperation name="setNmrConstraintStore"
   guid="www.ccpn.ac.uk_Fogh_2009-05-20-16:32:16_00003"
   container="www.ccpn.ac.uk_Fogh_2009-04-16-16:23:58_00005"
   isAbstract="false" isImplicit="false" isQuery="false" opType="set"
   scope="instance_level" visibility="public_vis">
    <documentation>setter for derived link nmrConstraintStore. Sets constraintLists to 'all'</documentation>
    <target>www.ccpn.ac.uk_Fogh_2009-05-20-16:32:16_00001</target>
    <codeStubs>
      <item tag="java">if (value == null) {
  setConstraintStoreSerial(null);
  setConstraintListSerials(new java.util.ArrayList&lt;java.lang.Integer&gt;());

} else if (getRun().getNmrCalcStore().getNmrProject() == value.getNmrProject()) {
  if (getConstraintStoreSerial() != value.getSerial()) {
    setConstraintStoreSerial(value.getSerial());
    setConstraintListSerials(new java.util.ArrayList&lt;java.lang.Integer&gt;());
  }

} else {
  throw new memops.general.ApiException(value + " does not belong to NmrCalcStore.nmrProject " + getRun().getNmrCalcStore().getNmrProject());
}</item>
      <item tag="python">if value is None:
    self.constraintStoreSerial = None
    self.constraintListSerials = ()

elif self.topObject.nmrProject is value.nmrProject:
  if self.constraintStoreSerial != value.serial:
    self.constraintStoreSerial = value.serial
    self.constraintListSerials = ()
else:
  raise ApiError("%s does not belong to NmrCalcStore.nmrProject %s" % (value,self.topObject.nmrProject ))</item>
    </codeStubs>
  </MetaOperation>
</MetaClass>

