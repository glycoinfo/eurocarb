<?xml version='1.0'?>
<!--
#######################################################################

CCPN Data Model version 2.0.b3

Autogenerated by XmlModelIo revision 1.17 on ?
  from data model element memops.Implementation.FileStorageObject revision ?

#######################################################################
======================COPYRIGHT/LICENSE START==========================

FileStorageObject.xml: xmlmodel model for CCPN data model, MetaClass memops.Implementation.FileStorageObject

Copyright (C) 2007  (CCPN Project)

=======================================================================

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.
 
A copy of this license can be found in ../../../../license/LGPL.license
 
This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
Lesser General Public License for more details.
 
You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA


======================COPYRIGHT/LICENSE END============================

for further information, please contact :

- CCPN website (http://www.ccpn.ac.uk/)

- email: ccpn@bioc.cam.ac.uk

=======================================================================

If you are using this software for academic purposes, we suggest
quoting the following references:

===========================REFERENCE START=============================
Rasmus H. Fogh, Wayne Boucher, Wim F. Vranken, Anne
Pajon, Tim J. Stevens, T.N. Bhat, John Westbrook, John M.C. Ionides and
Ernest D. Laue (2005). A framework for scientific data modeling and automated
software development. Bioinformatics 21, 1678-1684.


This file was generated with the Memops software generation framework,
and contains original contributions embedded in the framework

===========================REFERENCE END===============================
-->

<MetaClass name="FileStorageObject"
 guid="www.ccpn.ac.uk_Fogh_2006-08-16-14:22:53_00048"
 container="www.ccpn.ac.uk_Fogh_2006-08-16-14:22:53_00025"
 isAbstract="true" isImplicit="false" isLeaf="false" isRoot="false"
 isSingleton="false" partitionsChildren="false" visibility="public_vis">
  <documentation>Object to hold file and URL information for a package, including memops.Implementation</documentation>
  <taggedValues>
    <item tag="repositoryId">$Id: FileStorageObject.xml,v 1.19.2.11 2009/09/14 14:45:21 wimvranken Exp $</item>
    <item tag="repositoryTag">$Name: release_2_1_0_2 $</item>
    <item tag="specificImplementation">file</item>
  </taggedValues>


  <MetaRole name="activeRepositories"
   guid="www.ccpn.ac.uk_Fogh_2007-04-24-13:22:34_00001"
   container="www.ccpn.ac.uk_Fogh_2006-08-16-14:22:53_00048"
   baseName="activeRepository" changeability="frozen" hicard="-1"
   isAbstract="false" isAutomatic="false" isDerived="false"
   isImplementation="true" isImplicit="false" isOrdered="true" isUnique="true"
   locard="0" noDeleteIfSet="false" partitionsChildren="false"
   scope="instance_level" visibility="public_vis">
    <documentation>Repositories on package search path that contains a copy of TopObject</documentation>
    <valueType>www.ccpn.ac.uk_Fogh_2006-09-14-16:28:57_00004</valueType>
  </MetaRole>

  <MetaOperation name="backup"
   guid="www.ccpn.ac.uk_Fogh_2007-04-23-15:11:29_00011"
   container="www.ccpn.ac.uk_Fogh_2006-08-16-14:22:53_00048"
   isAbstract="false" isImplicit="false" isQuery="false" opType="other"
   scope="instance_level" visibility="public_vis">
    <documentation>back up TopObject to current backup location</documentation>
    <target>www.ccpn.ac.uk_Fogh_2007-04-23-15:11:29_00011</target>
    <codeStubs>
      <item tag="java">memops.api.Implementation.Repository repository = getRoot().findFirstRepository("name", "backup");
if (repository == null) {
  throw new memops.general.ApiException("No backup repository found for TopObject" + this);
} else {
  if (!getIsLoaded()) {
    // this hack is done because this code appears in MemopsRoot, which
    // does not have a load(), but then getIsLoaded() returns True
    java.lang.Object dummy = this;
     ((memops.api.Implementation.TopObject) dummy).load();
  }
  saveTo(repository);
}</item>
      <item tag="python">repository = self.memopsRoot.findFirstRepository(name='backup')
if repository:
  if not self.isLoaded:
    self.load()
  self.saveTo(repository)
else:
  raise ApiError('No backup repository found for TopObject %s' % self)</item>
    </codeStubs>
  </MetaOperation>

  <MetaAttribute name="createdBy"
   guid="www.ccpn.ac.uk_Fogh_2006-12-31-09:00:59_00002"
   container="www.ccpn.ac.uk_Fogh_2006-08-16-14:22:53_00048"
   baseName="createdBy" changeability="frozen" hicard="1" isAbstract="false"
   isAutomatic="true" isDerived="false" isImplementation="false"
   isImplicit="false" isOrdered="false" isUnique="true" locard="1"
   scope="instance_level" visibility="public_vis">
    <documentation>user who created TopObject.</documentation>
    <valueType>www.ccpn.ac.uk_Fogh_2006-08-16-14:22:53_00037</valueType>
  </MetaAttribute>

  <MetaAttribute name="isLoaded"
   guid="www.ccpn.ac.uk_Fogh_2006-08-17-14:16:26_00006"
   container="www.ccpn.ac.uk_Fogh_2006-08-16-14:22:53_00048"
   baseName="isLoaded" changeability="frozen" hicard="1" isAbstract="false"
   isAutomatic="false" isDerived="false" isImplementation="true"
   isImplicit="false" isOrdered="false" isUnique="true" locard="1"
   scope="instance_level" visibility="public_vis">
    <documentation>Implementation attribute, set automatically. True if the data in the Storage are loaded into memory. As data are loaded automatically, this attribute should be of interest only for the implementation.</documentation>
    <valueType>www.ccpn.ac.uk_Fogh_2006-08-16-14:22:53_00028</valueType>
  </MetaAttribute>

  <MetaAttribute name="isModifiable"
   guid="www.ccpn.ac.uk_Fogh_2006-08-17-14:16:26_00010"
   container="www.ccpn.ac.uk_Fogh_2006-08-16-14:22:53_00048"
   baseName="isModifiable" changeability="changeable" hicard="1"
   isAbstract="false" isAutomatic="false" isDerived="false"
   isImplementation="false" isImplicit="false" isOrdered="false" isUnique="true"
   locard="1" scope="instance_level" visibility="public_vis">
    <documentation>True if the data corresponding to the storage may be modified. If isModifiable is false for a given package, attemps to modify the data will raise an error. Note that isModifiable can be set to true even if the corresponding file is read-only. 

For a Project, this atribute defines whether the Implementation package (not the entire project contents) can be modified. If the Implementation package is Read-Only, this will prohibit many changes in the other packages as well.

This parameter can be freely modified by users, so it is not a security feature, but rather a protection against accidental changes. </documentation>
    <valueType>www.ccpn.ac.uk_Fogh_2006-08-16-14:22:53_00028</valueType>
    <defaultValue>
      <item>true</item>
    </defaultValue>
  </MetaAttribute>

  <MetaAttribute name="isModified"
   guid="www.ccpn.ac.uk_Fogh_2006-08-17-14:16:26_00007"
   container="www.ccpn.ac.uk_Fogh_2006-08-16-14:22:53_00048"
   baseName="isModified" changeability="frozen" hicard="1" isAbstract="false"
   isAutomatic="false" isDerived="false" isImplementation="true"
   isImplicit="false" isOrdered="false" isUnique="true" locard="1"
   scope="instance_level" visibility="public_vis">
    <documentation>Implementation attribute. True if the data corresponding to the Storage have been modified since being loaded. Serves to indicate which data need to be saved.</documentation>
    <valueType>www.ccpn.ac.uk_Fogh_2006-08-16-14:22:53_00028</valueType>
  </MetaAttribute>

  <MetaAttribute name="isReading"
   guid="www.ccpn.ac.uk_Fogh_2006-08-17-14:16:26_00008"
   container="www.ccpn.ac.uk_Fogh_2006-08-16-14:22:53_00048"
   baseName="isReading" changeability="frozen" hicard="1" isAbstract="false"
   isAutomatic="false" isDerived="false" isImplementation="true"
   isImplicit="false" isOrdered="false" isUnique="true" locard="1"
   scope="instance_level" visibility="public_vis">
    <documentation>Implementation attribute, set automatically. True if the data corresponding to the Storage are in the process of being read. As data loading is handled automatically, this attribute should be relevant only for the implementation, or possibly for programmers of multithreaded programs. Serves to suppress notifiers and validity checking during reading. Note that objects are not valid until the data loading is completed.</documentation>
    <valueType>www.ccpn.ac.uk_Fogh_2006-08-16-14:22:53_00028</valueType>
  </MetaAttribute>

  <MetaAttribute name="lastUnlockedBy"
   guid="www.ccpn.ac.uk_Fogh_2006-12-31-09:00:59_00003"
   container="www.ccpn.ac.uk_Fogh_2006-08-16-14:22:53_00048"
   baseName="lastUnlockedBy" changeability="frozen" hicard="1"
   isAbstract="false" isAutomatic="true" isDerived="false"
   isImplementation="false" isImplicit="false" isOrdered="false" isUnique="true"
   locard="0" scope="instance_level" visibility="public_vis">
    <documentation>User who last set TopObject.isModifiable to True.  Used to track if data have been modified. Provided data have isModifiable set to False, any modification in the underlying data will show up on lastUnlockedBy.</documentation>
    <valueType>www.ccpn.ac.uk_Fogh_2006-08-16-14:22:53_00037</valueType>
  </MetaAttribute>

  <MetaOperation name="removeFrom"
   guid="www.ccpn.ac.uk_Fogh_2007-04-23-16:25:49_00001"
   container="www.ccpn.ac.uk_Fogh_2006-08-16-14:22:53_00048"
   isAbstract="false" isImplicit="false" isQuery="true" opType="other"
   scope="instance_level" visibility="public_vis">
    <documentation>Remove data from specified repository. Will remove from disk. NB This operation is marked as a query because this means it may be executed on a deleted object. It does have the lasting side effect of changing the contents of the repository.</documentation>
    <target>www.ccpn.ac.uk_Fogh_2007-04-23-16:25:49_00001</target>
    <codeStubs>
      <item tag="java">// NB must be done by direct access
java.util.List&lt;? extends memops.api.Implementation.Repository&gt; activeRepositories = getActiveRepositories();
if (activeRepositories.contains(repository) &amp;&amp; (activeRepositories.size() &lt;= 1) &amp;&amp; !getIsDeleted())
  throw new memops.general.ApiException(this + ": cannot remove TopObject from last repository " + repository);

java.lang.String fileLocation = memops.format.xml.Util.findTopObjectPath(repository.getUrl().getDataLocation(), this);
java.io.File file = new java.io.File(fileLocation);
if (!file.delete()) {
  System.out.println(this + ": could not remove '" + fileLocation + "'");
  throw new memops.general.ApiException(this + ": could not remove '" + fileLocation + "'");
}

if (activeRepositories.contains(repository)) {
  if (repository == activeRepositories.get(0))
    _isModified = true;
  _activeRepositories.remove(repository);
}</item>
      <item tag="python"># NB must be done by direct access
activeRepositories = self.activeRepositories
if (repository in activeRepositories and len(activeRepositories) &lt;= 1
    and not self.isDeleted):
    raise ApiError("%s: cannot remove TopObject from last repository %s" % (self, repository))

from memops.format.xml import Util as xmlUtil
fileLocation = xmlUtil.findTopObjectPath(repository.url.getDataLocation(), self)
import os
try:
  os.remove(fileLocation)
except:
  print ("%s: could not remove %s" % (self, fileLocation))
  raise

if repository in activeRepositories:
  if repository is activeRepositories[0]:
    self.__dict__['isModified'] = True
  dataDict['activeRepositories'].remove(repository)</item>
    </codeStubs>


    <MetaParameter name="repository"
     guid="www.ccpn.ac.uk_Fogh_2007-04-23-16:25:49_00002"
     container="www.ccpn.ac.uk_Fogh_2007-04-23-16:25:49_00001"
     direction="in_dir" hicard="1" isImplicit="false" isOrdered="false"
     isUnique="true" locard="1">
      <documentation>repository to remove data from</documentation>
      <valueType>www.ccpn.ac.uk_Fogh_2006-09-14-16:28:57_00004</valueType>
    </MetaParameter>
  </MetaOperation>

  <MetaOperation name="save"
   guid="www.ccpn.ac.uk_Fogh_2006-08-17-14:16:26_00017"
   container="www.ccpn.ac.uk_Fogh_2006-08-16-14:22:53_00048"
   isAbstract="false" isImplicit="false" isQuery="false" opType="other"
   scope="instance_level" visibility="public_vis">
    <documentation>Save data corresponding to TopObject</documentation>
    <target>www.ccpn.ac.uk_Fogh_2006-08-17-14:16:26_00017</target>
    <codeStubs>
      <item tag="java">// NB must be done by direct access
java.util.List&lt;? extends memops.api.Implementation.Repository&gt; repositories = getActiveRepositories();
if (!repositories.isEmpty()) {
  saveTo(repositories.get(0));
} else {
   memops.api.Implementation.Repository newRepository = getPackageLocator().findFirstRepository();
  saveTo(newRepository);
}</item>
      <item tag="python"># NB must be done by direct access
repositories = self.activeRepositories
if repositories:
  repository = repositories[0]
else:
  repository = self.packageLocator.findFirstRepository()
self.saveTo(repository)
dataDict['isModified'] = False</item>
    </codeStubs>
  </MetaOperation>

  <MetaOperation name="saveTo"
   guid="www.ccpn.ac.uk_Fogh_2007-04-23-15:11:29_00007"
   container="www.ccpn.ac.uk_Fogh_2006-08-16-14:22:53_00048"
   isAbstract="false" isImplicit="false" isQuery="false" opType="other"
   scope="instance_level" visibility="public_vis">
    <documentation>Save topObject to specified repository</documentation>
    <target>www.ccpn.ac.uk_Fogh_2007-04-23-15:11:29_00007</target>
    <codeStubs>
      <item tag="java">// NB must be done by direct access
if (!getIsLoaded() || getInConstructor() || getIsReading())
  throw new memops.general.ApiException("WARNING " + this + ": cannot be saved while isLoaded = " + getIsLoaded() + ", inConstructor = " + getInConstructor() + ", isReading = " + getIsReading());

if ("xml".equals(repository.getFormat()) &amp;&amp; "file".equals(repository.getUrl().getProtocol())) {
  // must be done before saving
  java.util.List&lt;? extends memops.api.Implementation.Repository&gt; activeRepositories = getActiveRepositories();

  memops.format.xml.Io.save(repository.getUrl().getDataLocation(), this);

  if (!activeRepositories.contains(repository)) {
    java.util.List&lt;memops.api.Implementation.Repository&gt; ll = new java.util.ArrayList&lt;memops.api.Implementation.Repository&gt;();
    for (memops.api.Implementation.Repository x: getPackageLocator().getRepositories()) {
      if ((x == repository) || activeRepositories.contains(x))
        ll.add(x);
    }
  }
} else {
  throw new memops.general.ApiException(repository + ": format " + repository.getFormat() + ", protocol " + repository.getUrl().getProtocol() + ", not supported");
}</item>
      <item tag="python"># NB must be done by direct access
if not self.isLoaded or self.inConstructor or self.isReading:
  raise ApiError("%s: cannot be saved while isLoaded:%s, inConstructor:%s, isReading:%s"
                       % (self, self.isLoaded, self.inConstructor, self.isReading))

if repository.format == 'xml' and repository.url.protocol == 'file':
  
  # must be done before saving
  activeRepositories = self.activeRepositories

  from memops.format.xml import XmlIO
  XmlIO.save(repository.url.getDataLocation(), self)

  if repository not in activeRepositories:
    aSet = set(activeRepositories)
    aSet.add(repository)
    dataDict['activeRepositories'][:] = (x for x in self.packageLocator.repositories if x in aSet)

else:
  raise ApiError(" format %s, protocol %s not supported"
                       % (repository.format, repository.url.protocol))</item>
    </codeStubs>


    <MetaParameter name="repository"
     guid="www.ccpn.ac.uk_Fogh_2007-04-23-15:11:29_00008"
     container="www.ccpn.ac.uk_Fogh_2007-04-23-15:11:29_00007"
     direction="in_dir" hicard="1" isImplicit="false" isOrdered="false"
     isUnique="true" locard="1">
      <documentation>Repository to save to</documentation>
      <valueType>www.ccpn.ac.uk_Fogh_2006-09-14-16:28:57_00004</valueType>
    </MetaParameter>
  </MetaOperation>

  <MetaOperation name="setIsModifiable"
   guid="www.ccpn.ac.uk_Fogh_2006-08-17-14:16:26_00019"
   container="www.ccpn.ac.uk_Fogh_2006-08-16-14:22:53_00048"
   isAbstract="false" isImplicit="false" isQuery="false" opType="set"
   scope="instance_level" visibility="public_vis">
    <documentation>Special setter for isModifiable. Sets lastUnlockedBy</documentation>
    <target>www.ccpn.ac.uk_Fogh_2006-08-17-14:16:26_00010</target>
    <codeStubs>
      <item tag="java">// NB must be done by direct access
if (getIsModified())
  throw new memops.general.ApiException("Modified and unsaved Storage can not be set to non-modifiable");

if (value)
  _lastUnlockedBy = getRoot().getCurrentUserId();

_isModifiable = value;</item>
      <item tag="python"># NB must be done by direct access
if self.isModified:
  raise ApiError("Modified and unsaved Storage can not be set to non-modifiable")

if value:
  dataDict['lastUnlockedBy'] = self.root.currentUserId

dataDict['isModifiable'] = bool(value)</item>
    </codeStubs>
  </MetaOperation>

  <MetaOperation name="touch"
   guid="www.ccpn.ac.uk_Fogh_2006-08-17-14:16:26_00018"
   container="www.ccpn.ac.uk_Fogh_2006-08-16-14:22:53_00048"
   isAbstract="false" isImplicit="false" isQuery="false" opType="other"
   scope="instance_level" visibility="public_vis">
    <documentation>Set storage.isModified to True, so that the storage is saved at the next saveModified command. Fails if the storage is not loaded or not modifiable.</documentation>
    <target>www.ccpn.ac.uk_Fogh_2006-08-17-14:16:26_00018</target>
    <codeStubs>
      <item tag="java">// NB must be done by direct access
if (!getIsLoaded())
  throw new memops.general.ApiException("Attempt to touch non-loaded " + getPackageName() + " topObject");

if (!getIsModifiable())
  throw new memops.general.ApiException("Attempt to touch non-modifiable " + getPackageName() + " topObject");

_isModified = true;</item>
      <item tag="python"># NB must be done by direct access
if not self.isLoaded:
  raise ApiError("Attempt to touch non-loaded TopObject %s" % self)

if not self.isModifiable:
  raise ApiError("Attempt to touch non-modifiable TopObject %s" % self)

dataDict['isModified'] = True</item>
    </codeStubs>
  </MetaOperation>
</MetaClass>

