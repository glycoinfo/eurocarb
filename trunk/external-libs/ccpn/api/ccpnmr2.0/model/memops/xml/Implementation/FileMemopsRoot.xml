<?xml version='1.0'?>
<!--
#######################################################################

CCPN Data Model version 2.0.b2

Autogenerated by XmlModelIo revision 1.14.2.4 on ?
  from data model element memops.Implementation.FileMemopsRoot revision ?

#######################################################################
======================COPYRIGHT/LICENSE START==========================

FileMemopsRoot.xml: xmlmodel model for CCPN data model, MetaClass memops.Implementation.FileMemopsRoot

Copyright (C) 2007  (CCPN Project)

=======================================================================

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.
 
A copy of this license can be found in ../../../../license/LGPL.license
 
This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
Lesser General Public License for more details.
 
You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA


======================COPYRIGHT/LICENSE END============================

for further information, please contact :

- CCPN website (http://www.ccpn.ac.uk/)

- email: ccpn@bioc.cam.ac.uk

=======================================================================

If you are using this software for academic purposes, we suggest
quoting the following references:

===========================REFERENCE START=============================
Rasmus H. Fogh, Wayne Boucher, Wim F. Vranken, Anne
Pajon, Tim J. Stevens, T.N. Bhat, John Westbrook, John M.C. Ionides and
Ernest D. Laue (2005). A framework for scientific data modeling and automated
software development. Bioinformatics 21, 1678-1684.


This file was generated with the Memops software generation framework,
and contains original contributions embedded in the framework

===========================REFERENCE END===============================
-->

<MetaClass name="FileMemopsRoot"
 guid="www.ccpn.ac.uk_Fogh_2006-09-14-16:28:57_00007"
 container="www.ccpn.ac.uk_Fogh_2006-08-16-14:22:53_00025"
 isAbstract="true" isImplicit="false" isLeaf="false" isRoot="false"
 isSingleton="false" partitionsChildren="false" visibility="public_vis">
  <documentation>Memops Root Object for file implementations</documentation>
  <taggedValues>
    <item tag="repositoryId">$Id: FileMemopsRoot.xml,v 1.65.2.10 2009/03/11 17:22:01 rhfogh Exp $</item>
    <item tag="repositoryTag">$Name: release_2_0_8_3 $</item>
    <item tag="specificImplementation">file</item>
  </taggedValues>


  <MetaOperation name="backupAll"
   guid="www.ccpn.ac.uk_Fogh_2007-04-30-10:40:04_00001"
   container="www.ccpn.ac.uk_Fogh_2006-09-14-16:28:57_00007"
   isAbstract="false" isImplicit="false" isQuery="false" opType="other"
   scope="instance_level" visibility="public_vis">
    <documentation>back up memopsRoot and all known top objects</documentation>
    <target>www.ccpn.ac.uk_Fogh_2007-04-30-10:40:04_00001</target>
    <codeStubs>
      <item tag="java">if (findFirstRepository("name", "backup") != null) {
  backup();

  for (memops.api.Implementation.TopObject topObj: getTopObjects())
    topObj.backup();
}</item>
      <item tag="python">if self.findFirstRepository(name='backup'):
  self.backup()

  for topObj in self.topObjects:
      topObj.backup()</item>
    </codeStubs>
  </MetaOperation>

  <MetaOperation name="importData"
   guid="www.ccpn.ac.uk_Fogh_2007-10-11-15:05:49_00001"
   container="www.ccpn.ac.uk_Fogh_2006-09-14-16:28:57_00007"
   isAbstract="false" isImplicit="false" isQuery="false" opType="other"
   scope="instance_level" visibility="public_vis">
    <documentation>Load data from file, without triggering any other loads. If the guid or code of the file TopObject are already in memory you will get an error. The loaded file will be saved in the first repository on the search path, overriding anything that might be there already</documentation>
    <target>www.ccpn.ac.uk_Fogh_2007-10-11-15:05:49_00001</target>
    <codeStubs>
      <item tag="java">result = memops.format.xml.Io.loadFromFile(this, filePath);</item>
      <item tag="python">from memops.format.xml import XmlIO
result = XmlIO.loadFromFile(self, filePath)
# set to modified, as the loaded version may not come from the topmost repository
result.__dict__['isModified'] = True

# Fix activeRepositories - NB must be done bypassing API
useRepository = result.packageLocator.findFirstRepository()
activeRepositories = dataDict.get('activeRepositories')
if not useRepository in activeRepositories:
  activeRepositories.insert(0, useRepository)</item>
    </codeStubs>


    <MetaParameter name="filePath"
     guid="www.ccpn.ac.uk_Fogh_2007-10-11-15:05:49_00002"
     container="www.ccpn.ac.uk_Fogh_2007-10-11-15:05:49_00001"
     direction="in_dir" hicard="1" isImplicit="false" isOrdered="false"
     isUnique="true" locard="1">
      <documentation>name of file to load</documentation>
      <valueType>www.ccpn.ac.uk_Fogh_2006-08-16-14:22:54_00003</valueType>
    </MetaParameter>

    <MetaParameter name="result"
     guid="www.ccpn.ac.uk_Fogh_2007-10-11-15:05:49_00003"
     container="www.ccpn.ac.uk_Fogh_2007-10-11-15:05:49_00001"
     direction="return_dir" hicard="1" isImplicit="false" isOrdered="false"
     isUnique="true" locard="1">
      <valueType>www.ccpn.ac.uk_Fogh_2006-09-14-16:28:57_00002</valueType>
    </MetaParameter>
  </MetaOperation>

  <MetaOperation name="refreshTopObjects"
   guid="www.ccpn.ac.uk_Fogh_2007-04-24-16:25:58_00001"
   container="www.ccpn.ac.uk_Fogh_2006-09-14-16:28:57_00007"
   isAbstract="false" isImplicit="false" isQuery="false" opType="other"
   scope="instance_level" visibility="public_vis">
    <documentation>Check on disk to make sure all topObjects in package packageName are present.</documentation>
    <target>www.ccpn.ac.uk_Fogh_2007-04-24-16:25:58_00001</target>
    <codeStubs>
      <item tag="java">if ("memops.Implementation".equals(packageName))
  throw new memops.general.ApiException("refreshTopObjects not allowed for memops.Implementation");

java.util.Collection&lt;? extends memops.api.Implementation.TopObject&gt; topObjects = getTopObjects();
java.util.Map&lt;memops.api.Implementation.TopObject, java.util.List&lt;memops.api.Implementation.Repository&gt;&gt; activeRepositories = new java.util.HashMap&lt;memops.api.Implementation.TopObject, java.util.List&lt;memops.api.Implementation.Repository&gt;&gt;();

memops.api.Implementation.PackageLocator packageLocator = findFirstPackageLocator("targetName", packageName);
if (packageLocator == null)
   packageLocator = findFirstPackageLocator("targetName", "any");

for (memops.api.Implementation.Repository repository: packageLocator.getRepositories()) {
  java.lang.String fileLocation = repository.getFileLocation(packageName);
  java.io.File file = new java.io.File(fileLocation);
  if (!file.exists())
    continue;
  if (!file.isDirectory())
    throw new memops.general.ApiException("'" + fileLocation + "' is not a directory");

  java.lang.String sep = memops.format.xml.Util.keySep;
  java.lang.String fileSuffix = memops.format.xml.Util.fileSuffix;
  int lenSuffix = fileSuffix.length();
  for (java.lang.String filename: file.list()) {
    if (filename.endsWith(fileSuffix)) {
      java.lang.String[] ss = memops.universal.Util.splitString(filename, sep);
      java.lang.String guid = ss[ss.length-1];
      guid = guid.substring(0, guid.length()-lenSuffix);
      memops.api.Implementation.TopObject topObject = _topObjects.get(guid);
      if (topObject == null) {
        String filePath = memops.universal.Io.joinPath(fileLocation, filename);
        topObject = memops.format.xml.Io.loadFromFile(this, filePath, true);
      }

      java.util.List&lt;memops.api.Implementation.Repository&gt; ll = activeRepositories.get(topObject);
      if (ll == null)
        ll = new java.util.ArrayList&lt;memops.api.Implementation.Repository&gt;();
        activeRepositories.put(topObject, ll);

      ll.add(repository);
    }
  }
}

// set activeRepositories
for (memops.api.Implementation.TopObject topObject: activeRepositories.keySet()) {
  java.util.List&lt;memops.api.Implementation.Repository&gt; ll = activeRepositories.get(topObject);
  topObject._activeRepositories = ll;
}</item>
      <item tag="python"># NB must be done by direct access
if packageName == 'memops.Implementation':
    raise ApiError("refreshTopObjects not allowed for memops.Implementation")

import os, os.path
from memops.format.xml import XmlIO
from memops.format.xml import Util as xmlUtil

topObjects = self.__dict__['topObjects']
ff = self.findFirstPackageLocator

activeRepositories = {}

repositories = (ff(targetName=packageName) or ff(targetName='any')).repositories
for repository in repositories:

  fileLocation = repository.getFileLocation(packageName)
  if not os.path.exists(fileLocation):
    continue
  if not os.path.isdir(fileLocation):
    raise ApiError("%s is not a directory" % fileLocation)
  
  fileSuffix = xmlUtil.fileSuffix
  lenSuffix = xmlUtil.lenFileSuffix
  sep = xmlUtil.separatorFileNameChar
  for filename in os.listdir(fileLocation):

    if filename.endswith(fileSuffix):
      guid = filename.split(sep)[-1][:-lenSuffix]
      
      topObject = topObjects.get(guid)
      if topObject is None:
        filePath = os.path.join(fileLocation, filename)
        topObject = XmlIO.loadFromFile(self, filePath, partialLoad=True)
      
      ll = activeRepositories.setdefault(topObject, [])
      ll.append(repository)

# set activeRepositories
for topObject, ll in activeRepositories.iteritems():
  topObject.__dict__['activeRepositories'] = ll
  </item>
    </codeStubs>


    <MetaParameter name="packageName"
     guid="www.ccpn.ac.uk_Fogh_2007-04-24-16:25:58_00002"
     container="www.ccpn.ac.uk_Fogh_2007-04-24-16:25:58_00001"
     direction="in_dir" hicard="1" isImplicit="false" isOrdered="false"
     isUnique="true" locard="1">
      <documentation>packageName for package to refresh</documentation>
      <valueType>www.ccpn.ac.uk_Fogh_2006-08-16-14:22:53_00037</valueType>
    </MetaParameter>
  </MetaOperation>

  <MetaOperation name="saveAll"
   guid="www.ccpn.ac.uk_Fogh_2006-09-29-18:26:22_00001"
   container="www.ccpn.ac.uk_Fogh_2006-09-14-16:28:57_00007"
   isAbstract="false" isImplicit="false" isQuery="false" opType="other"
   scope="instance_level" visibility="public_vis">
    <documentation>force save of all data</documentation>
    <target>www.ccpn.ac.uk_Fogh_2006-09-29-18:26:22_00001</target>
    <codeStubs>
      <item tag="java">// NB must be done by direct access
for (memops.api.Implementation.TopObject topObj: _topObjects.values()) {
  if (topObj.getIsDeleted()) {
    for (memops.api.Implementation.Repository repository: topObj.getActiveRepositories())
      topObj.removeFrom(repository);
    _topObjects.remove(topObj.getGuid());
  } else {
    topObj.save();
  }
}
save();</item>
      <item tag="python"># NB must be done by direct access
for topObj in self.__dict__['topObjects'].values():
  if topObj.isDeleted:
    for repository in topObj.activeRepositories:
      topObj.removeFrom(repository)
    del  self.__dict__['topObjects'][topObj.guid]
  else:
    topObj.save()
self.save()</item>
    </codeStubs>
  </MetaOperation>

  <MetaOperation name="saveModified"
   guid="www.ccpn.ac.uk_Fogh_2006-09-14-18:48:26_00006"
   container="www.ccpn.ac.uk_Fogh_2006-09-14-16:28:57_00007"
   isAbstract="false" isImplicit="false" isQuery="false" opType="other"
   scope="instance_level" visibility="public_vis">
    <documentation>Save all modified data</documentation>
    <target>www.ccpn.ac.uk_Fogh_2006-09-14-18:48:26_00006</target>
    <codeStubs>
      <item tag="java">// NB must be done by direct access
for (memops.api.Implementation.TopObject topObj: _topObjects.values()) {
  if (topObj.getIsDeleted()) {
    for (memops.api.Implementation.Repository repository: topObj.getActiveRepositories())
      topObj.removeFrom(repository);
    _topObjects.remove(topObj.getGuid());
  } else if (topObj.getIsModified()) {
    topObj.save();
  }
}
if (getIsModified())
  save();</item>
      <item tag="python"># NB must be done by direct access
for topObj in self.__dict__['topObjects'].values():
  if topObj.isDeleted:
    for repository in topObj.activeRepositories:
      topObj.removeFrom(repository)
    del  self.__dict__['topObjects'][topObj.guid]
  elif topObj.isModified:
    topObj.save()
if self.isModified:
  self.save()</item>
    </codeStubs>
  </MetaOperation>
</MetaClass>

